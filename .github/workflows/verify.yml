name: Verify

on:
  pull_request:
    branches:
      - main

permissions:
  contents: read
  security-events: write

jobs:
  conform:
    runs-on: ubuntu-latest
    name: Conform

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: siderolabs/conform@v0.1.0-alpha.27
        with:
          token: ${{ secrets.CONFORM }}

  checkstyle:
    runs-on: ubuntu-latest
    name: Checkstyle
    strategy:
      max-parallel: 4
      matrix:
        java-version: [ "24" ]

    steps:
      - uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a
        with:
          egress-policy: audit

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          fetch-depth: 0

      - uses: actions/setup-java@dded0888837ed1f317902acf8a20df0ad188d165
        with:
          java-version: "${{ matrix.java-version }}"
          distribution: corretto

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run Checkstyle
        run: mvn --batch-mode clean verify checkstyle:check

  pmd:
    runs-on: ubuntu-latest
    name: PMD
    strategy:
      max-parallel: 4
      matrix:
        java-version: [ "24" ]

    steps:
      - uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - uses: actions/setup-java@dded0888837ed1f317902acf8a20df0ad188d165 # v5.0.0
        with:
          java-version: "${{ matrix.java-version }}"
          distribution: corretto

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run PMD Analysis
        run: mvn --batch-mode clean pmd:check

      - name: Run PMD Analysis
        run: mvn --batch-mode clean pmd:check pmd:pmd

      - name: Show PMD results in workflow
        run: |
          if [ -f target/pmd.xml ]; then
            echo "PMD violations found:"
            cat target/pmd.xml | grep -o '<violation[^>]*>.*</violation>' | head -10
          fi
      - name: Upload PMD report
        uses: actions/upload-artifact@v4
        with:
          name: pmd-report
          path: target/pmd.xml
          retention-days: 30

  spotbugs:
    runs-on: ubuntu-latest
    name: SpotBugs
    strategy:
      max-parallel: 4
      matrix:
        java-version: [ "24" ]
    steps:
      - uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
      - uses: actions/setup-java@dded0888837ed1f317902acf8a20df0ad188d165 # v5.0.0
        with:
          java-version: "${{ matrix.java-version }}"
          distribution: "corretto"
      - name: Cache Maven packages
        uses: actions/cache@v4
        id: maven-cache
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
      - name: Compile and Run SpotBugs
        run: |
          mvn clean compile || { echo "Compilation failed"; exit 1; }
          mvn spotbugs:spotbugs || { echo "SpotBugs failed"; exit 1; }
      - name: Upload SARIF to GitHub
        if: always()
        uses: github/codeql-action/upload-sarif@64d10c13136e1c5bce3e5fbde8d4906eeaafc885 # v3
        with:
          sarif_file: target/spotbugs/spotbugs.sarif  # Adjust if using a different filename/dir (e.g., target/spotbugsSarif.json)
        continue-on-error: false


  test:
    runs-on: ubuntu-latest
    name: Unit Tests
    strategy:
      max-parallel: 4
      matrix:
        java-version: [ "24" ]

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up JDK 24
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: "${{ matrix.java-version }}"
          cache: maven

      - name: Run Tests
        run: mvn -B test

  build:
    runs-on: ubuntu-latest
    name: Build
    needs:
      - checkstyle
      - pmd
      - spotbugs
      - test
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up JDK 24
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: 24
          cache: maven

      - name: Clean and Compile
        run: mvn -B clean compile

  hadolint:
    name: Hadolint
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Check if Dockerfile exists
        id: check_dockerfile
        run: |
          if [ -f Dockerfile ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Run Hadolint (via official action)
        if: steps.check_dockerfile.outputs.exists == 'true'
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          ignore: DL3008,DL3013  # optional: ignore some rules

      - name: Install Hadolint on runner
        if: steps.check_dockerfile.outputs.exists == 'true'
        run: |
          wget -O /usr/local/bin/hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          chmod +x /usr/local/bin/hadolint

      - name: Fail only on Hadolint errors
        if: steps.check_dockerfile.outputs.exists == 'true'
        run: |
          hadolint Dockerfile --failure-threshold error


  container-build:
    runs-on: ubuntu-latest
    needs: hadolint
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up JDK 24
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: 24
          cache: maven

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Log in to Harbor
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.HARBOR_REGISTRY_URL }}
          username: ${{ secrets.HARBOR_ROBOT_NAME }}
          password: ${{ secrets.HARBOR_ROBOT_SECRET }}

      - name: Build image
        run: docker build -t ${{ secrets.HARBOR_REGISTRY_URL }}/aaa/service-a:${{ github.sha }} .

      - name: Push image
        run: docker push ${{ secrets.HARBOR_REGISTRY_URL }}/aaa/service-a:${{ github.sha }}

      - name: Summary
        run: |
          echo " Image pushed to Harbor registry:"
          echo "${{ secrets.HARBOR_REGISTRY_URL }}/aaa/service-a:${{ github.sha }}"
